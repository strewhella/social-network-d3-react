{"version":3,"sources":["components/Interface.tsx","util/D3Utils.ts","util/DataUtils.ts","components/SocialNetwork.tsx","components/WordCloud.tsx","components/App.tsx","index.tsx"],"names":["Interface","_React$PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","adding","onAdd","bind","assertThisInitialized","onSearch","inherits","createClass","key","value","_this$props","onClear","search","react","className","onClick","type","placeholder","onChange","_this2","setTimeout","event","target","React","exitTransition","d3","ease","duration","enterTransition","stateChangeTransition","createTagFrequencies","people","tagDict","forEach","person","tags","tag","existingTag","keys","find","t","toLowerCase","map","random","count","color","concat","mergeTagFrequencies","first","second","dict","cloneDeep","addPerson","id","r","g","b","Set","radius","following","followed","bound","num","min","max","Math","normalizeTag","length","substring","PI_2","PI","SocialNetwork","circleGroup","triangleGroup","simulation","follows","center","force","d","distance","source","strength","x","y","width","height","onHover","p","nodes","links","alpha","restart","circles","selectAll","data","exit","on","transition","style","remove","enter","append","attr","merge","hovering","each","has","triangles","triangleEnter","angle","atan2","x4","cos","y4","sin","triangleSize","x1","x2","y1","y2","ref","PADDING","window","innerWidth","WordCloud","svg","state","createSimulation","nextProps","hoverPerson","setState","interacting","tagFrequencies","selection","_","interrupt","words","text","filteredTags","filter","includes","filterTags","some","tick","stop","_this$props2","innerHeight","App","onResize","onHoverPerson","addEventListener","removeEventListener","_this$state","hoveringPerson","react_default","a","createElement","Fragment","WordCloud_WordCloud","SocialNetwork_SocialNetwork","list","Interface_Interface","store","sample","ids","uniq","reduce","c","newIds","newPeopleTags","newPeople","i","size","k","follow","add","newTagFrequencies","console","error","_context","t0","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.e32fd3df.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface Props {\n    onAdd: () => void;\n    onClear: () => void;\n    onSearch: (search: string) => void;\n    search: string;\n}\n\nexport class Interface extends React.PureComponent<Props> {\n    private adding: boolean;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.onAdd = this.onAdd.bind(this);\n        this.onSearch = this.onSearch.bind(this);\n    }\n\n    public render() {\n        const { onClear, search } = this.props;\n\n        return (\n            <React.Fragment>\n                <h1 className=\"title\">The Social Network</h1>\n\n                <a className=\"button add\" onClick={this.onAdd}>\n                    <div>+</div>\n                </a>\n                <a className=\"button clear\" onClick={onClear}>\n                    <div>-</div>\n                </a>\n                <input\n                    className=\"search\"\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    onChange={this.onSearch}\n                    value={search}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private onAdd() {\n        if (!this.adding) {\n            this.adding = true;\n            this.props.onAdd();\n            setTimeout(() => {\n                this.adding = false;\n            }, 1000);\n        }\n    }\n\n    private onSearch(event: any) {\n        this.props.onSearch(event.target.value);\n    }\n}\n","import * as d3 from 'd3';\n\nconst enterExitDuration = 400;\nconst stateChangeDuration = 600;\n\nexport const exitTransition = d3\n    .transition('exit')\n    .ease(d3.easeBackIn)\n    .duration(enterExitDuration);\n\nexport const enterTransition = d3\n    .transition('enter')\n    .ease(d3.easeBackOut)\n    .duration(enterExitDuration);\n\nexport const stateChangeTransition = d3\n    .transition('change')\n    .ease(d3.easeCircleInOut)\n    .duration(stateChangeDuration);\n","import { TagFrequency } from '../interfaces/TagFrequency';\nimport { Person } from '../interfaces/Person';\nimport { People } from '../interfaces/People';\nimport { random, cloneDeep } from 'lodash';\n\nexport const createTagFrequencies = (people: Person[]): TagFrequency[] => {\n    // Calculate how often each tag occurs\n    const tagDict = {};\n    people.forEach(person => {\n        person.tags.forEach(tag => {\n            // Find existing tags ignoring case\n            // since twitter handles and hashtags are case insensitive\n            const existingTag = Object.keys(tagDict).find(\n                t => t.toLowerCase() === tag.toLowerCase()\n            );\n\n            if (existingTag) {\n                tag = existingTag;\n            }\n\n            if (!tagDict[tag]) {\n                tagDict[tag] = 0;\n            }\n\n            tagDict[tag]++;\n        });\n    });\n\n    return Object.keys(tagDict).map(tag => {\n        const value = random(150, 220);\n        return {\n            tag,\n            count: tagDict[tag],\n            color: `rgb(${value},${value},${value})`\n        };\n    });\n};\n\nexport const mergeTagFrequencies = (\n    first: TagFrequency[],\n    second: TagFrequency[]\n): TagFrequency[] => {\n    const dict = {};\n    cloneDeep(first)\n        .concat(cloneDeep(second))\n        .forEach(t => {\n            const tag = t.tag.toLowerCase();\n            if (!dict[tag]) {\n                dict[tag] = t;\n            } else {\n                dict[tag].count += t.count;\n            }\n        });\n\n    return Object.keys(dict).map(key => dict[key]);\n};\n\nexport const addPerson = (id: number, people: People) => {\n    const r = random(0, 255);\n    const g = random(0, 255);\n    const b = random(0, 255);\n    const color = `rgb(${r},${g},${b})`;\n\n    people[id] = {\n        id,\n        tags: new Set<string>(),\n        radius: 0,\n        following: new Set<number>(),\n        followed: new Set<number>(),\n        color\n    };\n\n    return people[id];\n};\n\nexport const bound = (num: number, min: number, max: number) =>\n    Math.max(min, Math.min(max - min, num));\n\nexport const normalizeTag = (tag: string) => {\n    if (tag[tag.length - 1] === ':') {\n        tag = tag.substring(0, tag.length - 1);\n    }\n\n    return tag;\n};\n\nexport const filterTags = (tags: TagFrequency[], search: string) => {\n    return tags\n        .filter(t => t.tag.toLowerCase().includes(search.toLowerCase()))\n        .map(t => t.tag);\n};\n","import * as React from 'react';\nimport { Point } from '../interfaces/Point';\nimport * as d3 from 'd3';\nimport { Person } from '../interfaces/Person';\nimport { FollowRelationship } from '../interfaces/FollowRelationship';\nimport { enterTransition, exitTransition } from '../util/D3Utils';\nimport { bound } from '../util/DataUtils';\nimport { random } from 'lodash';\nimport { Simulation } from 'd3';\n\ninterface Props {\n    width: number;\n    height: number;\n    center: Point;\n    people: Person[];\n    follows: FollowRelationship[];\n    onHover: (id?: number) => void;\n}\n\nconst PI_2 = Math.PI / 2;\nconst LINK_FILL = '#B8B8B8';\nconst NODE_FILL = '#000000';\n\nexport class SocialNetwork extends React.PureComponent<Props> {\n    private circleGroup: SVGElement | null;\n    private triangleGroup: SVGElement | null;\n\n    private simulation: Simulation<Person, FollowRelationship>;\n\n    constructor(props: Props) {\n        super(props);\n\n        const { people, follows, center } = props;\n\n        this.simulation = d3\n            .forceSimulation(people)\n            .force(\n                'links',\n                d3\n                    .forceLink(follows)\n                    .id((d: Person) => d.id as any)\n                    .distance(\n                        (d: any) => d.source.radius + d.target.radius + 10\n                    )\n                    .strength(0)\n            )\n            .force('center', d3.forceCenter(center.x, center.y))\n            .force('charge', d3.forceManyBody().strength(-1))\n            .force(\n                'collide',\n                d3.forceCollide().radius((d: Person) => d.radius)\n            );\n    }\n\n    public render() {\n        const { width, height, center, people, follows, onHover } = this.props;\n\n        // Initialize node position so they start roughly in the center\n        people.forEach(p => {\n            p.x = p.x || random(center.x - 50, center.x + 50);\n            p.y = p.y || random(center.y - 50, center.y + 50);\n        });\n\n        this.simulation.nodes(people);\n        (this.simulation.force('links') as any).links(follows);\n        this.simulation.alpha(1).restart();\n\n        let circles = d3\n            .select(this.circleGroup)\n            .selectAll('circle')\n            .data(people, (d: Person) => d.id + '');\n\n        circles\n            .exit()\n            .on('mouseover', null)\n            .on('mouseout', null)\n            .transition(exitTransition)\n            .style('transform', 'scale(0)')\n            .remove();\n\n        const enter = circles.enter().append('circle');\n\n        enter\n            .style('transform', 'scale(0)')\n            .attr('fill', NODE_FILL)\n            .attr('stroke', d => d.color)\n            .attr('stroke-width', d => d.radius / 4)\n            .attr('data-id', d => `id-${d.id}`)\n            .transition(enterTransition)\n            .style('transform-origin', 'center')\n            .style('cursor', 'pointer')\n            .style('transform', 'scale(1)');\n\n        circles = enter\n            .merge(circles as any)\n            .on('mouseover', hovering => {\n                d3.selectAll('circle').each(function(d: Person) {\n                    d3.select(this).attr(\n                        'opacity',\n                        hovering.id === d.id || hovering.following.has(d.id)\n                            ? 1\n                            : 0.1\n                    );\n                });\n                d3.selectAll('polygon').each(function(d: FollowRelationship) {\n                    d3.select(this).attr(\n                        'opacity',\n                        hovering.id === d.source.id ? 1 : 0.05\n                    );\n                });\n                d3.selectAll(`[data-id=id-${hovering.id}]`).attr(\n                    'fill',\n                    hovering.color\n                );\n                onHover(hovering.id);\n            })\n            .on('mouseout', function(d) {\n                d3.selectAll(`circle[data-id=id-${d.id}]`).attr(\n                    'fill',\n                    NODE_FILL\n                );\n                d3.selectAll(`polygon[data-id=id-${d.id}]`).attr(\n                    'fill',\n                    LINK_FILL\n                );\n                d3.selectAll('circle').attr('opacity', 1);\n                d3.selectAll('polygon').attr('opacity', 1);\n                onHover();\n            })\n            .attr('r', d => d.radius)\n            .attr('cx', center.x)\n            .attr('cy', center.y)\n            .attr('fill', d => (d.hovering ? d.color : NODE_FILL));\n\n        let triangles = d3\n            .select(this.triangleGroup)\n            .selectAll('polygon')\n            .data(follows);\n\n        triangles\n            .exit()\n            .transition(exitTransition)\n            .style('transform-origin', 'center')\n            .style('transform', 'scale(0)')\n            .remove();\n\n        let triangleEnter = triangles\n            .enter()\n            .append('polygon')\n            .style('cursor', 'pointer')\n            .attr('data-id', (d: FollowRelationship) => `id-${d.source.id}`);\n\n        triangles = triangleEnter\n            .merge(triangles as any)\n            .attr('fill', (d: any) => (d.hovering ? d.color : LINK_FILL));\n\n        // Update the positions of the nodes and the lines based on their physics calculations\n        this.simulation.nodes(people).on('tick', () => {\n            // Keep nodes within the width and height bounds\n            // https://bl.ocks.org/mbostock/1129492\n            circles\n                .attr('cx', (d: any) => bound(d.x, d.radius, width))\n                .attr('cy', (d: any) => bound(d.y, d.radius, height));\n\n            triangles.attr('points', (d: any) => {\n                const source = {\n                    x: bound(d.source.x, d.source.radius, width),\n                    y: bound(d.source.y, d.source.radius, height)\n                };\n                const target = {\n                    x: bound(d.target.x, d.target.radius, width),\n                    y: bound(d.target.y, d.target.radius, height)\n                };\n\n                // Calculate the angle of the line between the nodes\n                const angle = Math.atan2(\n                    target.y - source.y,\n                    target.x - source.x\n                );\n\n                // Move the target center point to the edge closest to the source node\n                const x4 = Math.cos(angle) * -d.target.radius + target.x;\n                const y4 = Math.sin(angle) * -d.target.radius + target.y;\n\n                // Create 2 source points moved out from the source center\n                // by a third the radius at right angles from the angle between nodes\n                // to give directionality to follow relationship\n                const triangleSize = d.source.radius / 6;\n                const x1 = Math.cos(angle + PI_2) * triangleSize + source.x;\n                const x2 = Math.cos(angle - PI_2) * triangleSize + source.x;\n                const y1 = Math.sin(angle + PI_2) * triangleSize + source.y;\n                const y2 = Math.sin(angle - PI_2) * triangleSize + source.y;\n\n                return `${x1},${y1} ${x2},${y2} ${x4},${y4}`;\n            });\n        });\n\n        return (\n            <svg width={width} height={height}>\n                <g ref={r => (this.triangleGroup = r)} />\n                <g ref={r => (this.circleGroup = r)} />\n            </svg>\n        );\n    }\n}\n","import * as React from 'react';\nimport { Point } from '../interfaces/Point';\nimport { Person } from '../interfaces/Person';\nimport * as d3 from 'd3';\nimport { random } from 'lodash';\nimport { TagFrequency } from '../interfaces/TagFrequency';\nimport { Simulation } from 'd3';\nimport { filterTags } from '../util/DataUtils';\nimport {\n    enterTransition,\n    exitTransition,\n    stateChangeTransition\n} from '../util/D3Utils';\n\ninterface Props {\n    width: number;\n    height: number;\n    center: Point;\n    hoverPerson?: Person;\n    tagFrequencies: TagFrequency[];\n    search?: string;\n}\n\ninterface State {\n    interacting?: boolean;\n}\n\nconst PADDING = window.innerWidth / 20;\n\nexport class WordCloud extends React.PureComponent<Props, State> {\n    private svg: SVGElement | null;\n    private simulation: Simulation<TagFrequency, any>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {};\n\n        this.simulation = this.createSimulation();\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        if (\n            (this.props.hoverPerson && !nextProps.hoverPerson) ||\n            (!this.props.hoverPerson && nextProps.hoverPerson) ||\n            this.props.search !== nextProps.search\n        ) {\n            this.setState({\n                interacting: true\n            });\n        }\n\n        if (\n            this.state.interacting &&\n            (!this.props.hoverPerson &&\n                !nextProps.hoverPerson &&\n                this.props.search === nextProps.search)\n        ) {\n            this.setState({\n                interacting: false\n            });\n        }\n\n        if (\n            this.props.tagFrequencies.length === 0 &&\n            nextProps.tagFrequencies.length > 0\n        ) {\n            this.simulation = this.createSimulation();\n        }\n    }\n\n    public render() {\n        const {\n            width,\n            height,\n            tagFrequencies,\n            hoverPerson,\n            center,\n            search\n        } = this.props;\n        const { interacting } = this.state;\n\n        const selection = d3\n            .select(this.svg)\n            .selectAll('text')\n            .data(tagFrequencies, (d: TagFrequency) => d.tag);\n\n        const enter = selection\n            .enter()\n            .append('text')\n            .style('transform-origin', 'center')\n            .attr('x', _ => random(PADDING, width - PADDING))\n            .attr('y', _ => random(PADDING, height - PADDING));\n        enter.transition(enterTransition).style('transform', 'scale(1)');\n\n        const exit = selection.exit();\n        exit.interrupt('exit');\n        exit.transition(exitTransition)\n            .style('transform', 'scale(0)')\n            .remove();\n\n        const transition = d3.transition('words').duration(1000);\n\n        const words = enter.merge(selection as any).text(d => d.tag);\n\n        const filteredTags =\n            (search && filterTags(tagFrequencies, search)) || [];\n\n        words.interrupt('change');\n        words\n            .transition(stateChangeTransition)\n            .attr('fill', d => {\n                // Highlight tags of hovered person\n                return (hoverPerson && hoverPerson.tags.has(d.tag)) ||\n                    (search && filteredTags.some(t => d.tag === t))\n                    ? '#000000'\n                    : d.color;\n            })\n            .attr('opacity', d =>\n                (hoverPerson && !hoverPerson.tags.has(d.tag)) ||\n                (search && !filteredTags.some(t => d.tag === t))\n                    ? 0.05\n                    : 1\n            );\n\n        if (!interacting) {\n            // Reset the positions of all tags to the center so they recalculate correctly\n            tagFrequencies.forEach(p => {\n                p.x = random(center.x - PADDING, center.x + PADDING);\n                p.y = random(center.y - PADDING, center.y + PADDING);\n            });\n\n            this.simulation.nodes(tagFrequencies);\n            // Only run the simulation for a few ticks, rather than continuously\n            this.simulation.tick(3);\n            this.simulation.stop();\n        }\n\n        // Transition words to their force calculated positions\n        words\n            .transition(transition)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .attr('font-size', d => d.count * 3 + 6 + 'px');\n\n        return <svg ref={r => (this.svg = r)} width={width} height={height} />;\n    }\n\n    private createSimulation() {\n        const { tagFrequencies, center } = this.props;\n        return d3\n            .forceSimulation(tagFrequencies)\n            .force(\n                'center',\n                d3\n                    .forceCenter()\n                    .x(center.x)\n                    .y(center.y)\n            )\n            .force(\n                'charge',\n                d3.forceManyBody().strength(-window.innerHeight / 4)\n            )\n            .force('collide', d3.forceCollide().strength(50));\n    }\n}\n","import React, { Component } from 'react';\nimport { Store } from '../interfaces/Store';\nimport { uniq, cloneDeep } from 'lodash';\nimport { Interface } from './Interface';\nimport { Point } from '../interfaces/Point';\nimport { SocialNetwork } from './SocialNetwork';\nimport { People } from '../interfaces/People';\nimport { FollowRelationship } from '../interfaces/FollowRelationship';\nimport {\n    addPerson,\n    normalizeTag,\n    createTagFrequencies,\n    mergeTagFrequencies\n} from '../util/DataUtils';\nimport { WordCloud } from './WordCloud';\nimport { Person } from '../interfaces/Person';\nimport { TagFrequency } from '../interfaces/TagFrequency';\n\ndeclare var store: Store;\n\ninterface State {\n    people: People;\n    follows: FollowRelationship[];\n    width: number;\n    height: number;\n    center: Point;\n    hoveringPerson?: Person;\n    tagFrequencies: TagFrequency[];\n    search?: string;\n}\n\nclass App extends Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const center = { x: width / 2, y: height / 2 };\n\n        this.state = {\n            people: {},\n            follows: [],\n            width,\n            height,\n            center,\n            tagFrequencies: [],\n            search: ''\n        };\n\n        this.onAdd = this.onAdd.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.onHoverPerson = this.onHoverPerson.bind(this);\n        this.onSearch = this.onSearch.bind(this);\n    }\n\n    public componentDidMount() {\n        this.onAdd();\n\n        window.addEventListener('resize', this.onResize);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize);\n    }\n\n    public render() {\n        const {\n            width,\n            height,\n            follows,\n            center,\n            hoveringPerson,\n            people,\n            tagFrequencies,\n            search\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                <WordCloud\n                    width={width}\n                    height={height}\n                    center={center}\n                    hoverPerson={hoveringPerson}\n                    tagFrequencies={tagFrequencies}\n                    search={search}\n                />\n                <SocialNetwork\n                    people={people.list || []}\n                    follows={follows}\n                    width={width}\n                    height={height}\n                    center={center}\n                    onHover={this.onHoverPerson}\n                />\n                <Interface\n                    onAdd={this.onAdd}\n                    onClear={this.onClear}\n                    onSearch={this.onSearch}\n                    search={search}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private onResize() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const center = { x: width / 2, y: height / 2 };\n\n        this.setState({\n            width,\n            height,\n            center\n        });\n    }\n\n    private async onAdd() {\n        try {\n            const follows = await store.sample();\n\n            const people = { ...this.state.people };\n\n            // Figure out the new people\n            const ids = uniq(follows.reduce((p, c) => p.concat(c), []));\n            const newIds = ids.filter(id => !people[id]);\n\n            // Fetch the tags for the new people in one go\n            const newPeopleTags = await store.tags(newIds);\n            // Create the new people and assign their tags\n            const newPeople = newIds.map((id, i) => {\n                const person = addPerson(id, people);\n                person.tags = new Set<string>(\n                    newPeopleTags[i].map(normalizeTag)\n                );\n                person.radius = person.tags.size * 0.3 + 4;\n                return person;\n            });\n\n            people.list = Object.keys(people)\n                .filter(k => k !== 'list')\n                .map(id => people[id]);\n\n            // Add the following relationship to the people\n            follows.forEach(follow => {\n                const a = people[follow[0]];\n                const b = people[follow[1]];\n\n                a.following.add(b.id);\n                b.followed.add(a.id);\n            });\n\n            const newTagFrequencies = createTagFrequencies(newPeople);\n            const tagFrequencies = mergeTagFrequencies(\n                this.state.tagFrequencies,\n                newTagFrequencies\n            );\n\n            this.setState({\n                people,\n                tagFrequencies,\n                follows: this.state.follows.concat(\n                    follows.map(follow => {\n                        return {\n                            source: follow[0] as any,\n                            target: follow[1] as any\n                        };\n                    })\n                )\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    private onHoverPerson(id: number) {\n        const { people } = this.state;\n\n        this.setState({\n            hoveringPerson: people[id]\n        });\n    }\n\n    private onClear() {\n        this.setState({\n            people: {},\n            follows: [],\n            tagFrequencies: [],\n            search: ''\n        });\n    }\n\n    private onSearch(search: string) {\n        this.setState({\n            search\n        });\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}