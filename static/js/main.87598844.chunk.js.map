{"version":3,"sources":["components/Interface.tsx","util/D3Utils.ts","util/DataUtils.ts","components/SocialNetwork.tsx","components/WordCloud.tsx","components/App.tsx","index.tsx"],"names":["Interface","props","react","className","onClick","onAdd","onClear","exitTransition","d3","ease","duration","enterTransition","stateChangeTransition","addPerson","id","people","r","random","g","b","color","concat","tags","Set","radius","following","followed","bound","num","min","max","Math","normalizeTag","tag","length","substring","PI_2","PI","SocialNetwork","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","circleGroup","triangleGroup","inherits","createClass","key","value","_this2","_this$props","width","height","center","follows","onHover","forEach","p","x","y","simulation","force","d","distance","source","target","strength","circles","selectAll","data","exit","on","transition","style","remove","enter","append","attr","merge","hovering","each","has","triangles","triangleEnter","nodes","angle","atan2","x4","cos","y4","sin","triangleSize","x1","x2","y1","y2","ref","React","PADDING","window","innerWidth","WordCloud","svg","hoverPerson","tagFrequencies","tagDict","person","existingTag","keys","find","t","toLowerCase","map","count","calculateTagFrequencies","selection","_","words","text","interrupt","tick","stop","App","innerHeight","state","bind","assertThisInitialized","onResize","onHoverPerson","addEventListener","removeEventListener","_this$state","hoveringPerson","react_default","a","createElement","Fragment","WordCloud_WordCloud","list","SocialNetwork_SocialNetwork","Interface_Interface","setState","store","sample","ids","uniq","reduce","c","newIds","filter","newPeopleTags","i","size","k","follow","add","console","error","_context","t0","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"uRAOaA,EAA8B,SAACC,GACxC,OACIC,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,oBAAIC,UAAU,SAAd,sBAEAD,EAAA,mBAAGC,UAAU,aAAaC,QAASH,EAAMI,OACrCH,EAAA,+BAEJA,EAAA,mBAAGC,UAAU,eAAeC,QAASH,EAAMK,SACvCJ,EAAA,wCCXHK,EAAiBC,IACd,QACXC,KAAKD,KACLE,SANqB,KAQbC,EAAkBH,IACf,SACXC,KAAKD,KACLE,SAXqB,KAabE,EAAwBJ,IACrB,UACXC,KAAKD,KACLE,SAfuB,KC+BfG,EAAY,SAACC,EAAYC,GAClC,IAAMC,EAAIC,iBAAO,EAAG,KACdC,EAAID,iBAAO,EAAG,KACdE,EAAIF,iBAAO,EAAG,KACdG,EAAK,OAAAC,OAAUL,EAAV,KAAAK,OAAeH,EAAf,KAAAG,OAAoBF,EAApB,KAWX,OATAJ,EAAOD,GAAM,CACTA,KACAQ,KAAM,IAAIC,IACVC,OAAQ,EACRC,UAAW,IAAIF,IACfG,SAAU,IAAIH,IACdH,SAGGL,EAAOD,IAGLa,EAAQ,SAACC,EAAaC,EAAaC,GAA3B,OACjBC,KAAKD,IAAID,EAAKE,KAAKF,IAAIC,EAAMD,EAAKD,KAEzBI,EAAe,SAACC,GAKzB,MAJ4B,MAAxBA,EAAIA,EAAIC,OAAS,KACjBD,EAAMA,EAAIE,UAAU,EAAGF,EAAIC,OAAS,IAGjCD,GC1CLG,EAAOL,KAAKM,GAAK,EAIVC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAZ,OAAAa,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAR,EAAAC,OAAAQ,EAAA,EAAAR,CAAAE,MAAAJ,EAAAE,OAAAS,EAAA,EAAAT,CAAAJ,IAAAc,KAAAC,MAAAb,EAAA,CAAAI,MAAAvB,OAAA0B,MACYO,iBADZ,EAAAb,EAEYc,mBAFZ,EAAAd,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAAJ,EAAAC,GAAAG,OAAAe,EAAA,EAAAf,CAAAJ,EAAA,EAAAoB,IAAA,SAAAC,MAAA,WAIoB,IAAAC,EAAAhB,KAAAiB,EACgDjB,KAAK3C,MAAzD6D,EADID,EACJC,MAAOC,EADHF,EACGE,OAAQC,EADXH,EACWG,OAAQjD,EADnB8C,EACmB9C,OAAQkD,EAD3BJ,EAC2BI,QAASC,EADpCL,EACoCK,QAGhDnD,EAAOoD,QAAQ,SAAAC,GACXA,EAAEC,EAAID,EAAEC,GAAKpD,iBAAO+C,EAAOK,EAAI,GAAIL,EAAOK,EAAI,IAC9CD,EAAEE,EAAIF,EAAEE,GAAKrD,iBAAO+C,EAAOM,EAAI,GAAIN,EAAOM,EAAI,MAGlD,IAAMC,EAAa/D,IACEO,GAChByD,MACG,QACAhE,IACeyD,GACVnD,GAAG,SAAC2D,GAAD,OAAeA,EAAE3D,KACpB4D,SACG,SAACD,GAAD,OAAYA,EAAEE,OAAOnD,OAASiD,EAAEG,OAAOpD,OAAS,KAEnDqD,SAAS,IAEjBL,MAAM,SAAUhE,IAAewD,EAAOK,EAAGL,EAAOM,IAChDE,MAAM,SAAUhE,MAAmBqE,UAAU,IAC7CL,MACG,UACAhE,MAAkBgB,OAAO,SAACiD,GAAD,OAAeA,EAAEjD,UAG9CsD,EAAUtE,IACFoC,KAAKU,aACZyB,UAAU,UACVC,KAAKjE,EAAQ,SAAC0D,GAAD,OAAeA,EAAE3D,GAAK,KAExCgE,EACKG,OACAC,GAAG,YAAa,MAChBA,GAAG,WAAY,MACfC,WAAW5E,GACX6E,MAAM,YAAa,YACnBC,SAEL,IAAMC,EAAQR,EAAQQ,QAAQC,OAAO,UAErCD,EACKF,MAAM,YAAa,YACnBI,KAAK,OAnDA,WAoDLA,KAAK,SAAU,SAAAf,GAAC,OAAIA,EAAErD,QACtBoE,KAAK,eAAgB,SAAAf,GAAC,OAAIA,EAAEjD,OAAS,IACrCgE,KAAK,UAAW,SAAAf,GAAC,YAAApD,OAAUoD,EAAE3D,MAC7BqE,WAAWxE,GACXyE,MAAM,mBAAoB,UAC1BA,MAAM,SAAU,WAChBA,MAAM,YAAa,YAExBN,EAAUQ,EACLG,MAAMX,GACNI,GAAG,YAAa,SAAAQ,GACblF,IAAa,UAAUmF,KAAK,SAASlB,GACjCjE,IAAUoC,MAAM4C,KACZ,UACAE,EAAS5E,KAAO2D,EAAE3D,IAAM4E,EAASjE,UAAUmE,IAAInB,EAAE3D,IAC3C,EACA,MAGdN,IAAa,WAAWmF,KAAK,SAASlB,GAClCjE,IAAUoC,MAAM4C,KACZ,UACAE,EAAS5E,KAAO2D,EAAEE,OAAO7D,GAAK,EAAI,OAG1CN,IAAA,eAAAa,OAA4BqE,EAAS5E,GAArC,MAA4C0E,KACxC,OACAE,EAAStE,OAEb8C,EAAQwB,EAAS5E,MAEpBoE,GAAG,WAAY,SAAST,GACrBjE,IAAA,qBAAAa,OAAkCoD,EAAE3D,GAApC,MAA2C0E,KACvC,OArFF,WAwFFhF,IAAA,sBAAAa,OAAmCoD,EAAE3D,GAArC,MAA4C0E,KACxC,OA1FF,WA6FFhF,IAAa,UAAUgF,KAAK,UAAW,GACvChF,IAAa,WAAWgF,KAAK,UAAW,GACxCtB,MAEHsB,KAAK,IAAK,SAAAf,GAAC,OAAIA,EAAEjD,SACjBgE,KAAK,KAAMxB,EAAOK,GAClBmB,KAAK,KAAMxB,EAAOM,GAClBkB,KAAK,OAAQ,SAAAf,GAAC,OAAKA,EAAEiB,SAAWjB,EAAErD,MAnG7B,YAqGV,IAAIyE,EAAYrF,IACJoC,KAAKW,eACZwB,UAAU,WACVC,KAAKf,GAEV4B,EACKZ,OACAE,WAAW5E,GACX6E,MAAM,mBAAoB,UAC1BA,MAAM,YAAa,YACnBC,SAEL,IAAIS,EAAgBD,EACfP,QACAC,OAAO,WACPH,MAAM,SAAU,WAChBI,KAAK,UAAW,SAACf,GAAD,YAAApD,OAAiCoD,EAAEE,OAAO7D,MA+C/D,OA7CA+E,EAAYC,EACPL,MAAMI,GACNL,KAAK,OAAQ,SAACf,GAAD,OAAaA,EAAEiB,SAAWjB,EAAErD,MA1HpC,YA6HVmD,EAAWwB,MAAMhF,GAAQmE,GAAG,OAAQ,WAGhCJ,EACKU,KAAK,KAAM,SAACf,GAAD,OAAY9C,EAAM8C,EAAEJ,EAAGI,EAAEjD,OAAQsC,KAC5C0B,KAAK,KAAM,SAACf,GAAD,OAAY9C,EAAM8C,EAAEH,EAAGG,EAAEjD,OAAQuC,KAEjD8B,EAAUL,KAAK,SAAU,SAACf,GACtB,IAAME,EACChD,EAAM8C,EAAEE,OAAON,EAAGI,EAAEE,OAAOnD,OAAQsC,GADpCa,EAEChD,EAAM8C,EAAEE,OAAOL,EAAGG,EAAEE,OAAOnD,OAAQuC,GAEpCa,EACCjD,EAAM8C,EAAEG,OAAOP,EAAGI,EAAEG,OAAOpD,OAAQsC,GADpCc,EAECjD,EAAM8C,EAAEG,OAAON,EAAGG,EAAEG,OAAOpD,OAAQuC,GAIpCiC,EAAQjE,KAAKkE,MACfrB,EAAWD,EACXC,EAAWD,GAITuB,EAAKnE,KAAKoE,IAAIH,IAAUvB,EAAEG,OAAOpD,OAASoD,EAC1CwB,EAAKrE,KAAKsE,IAAIL,IAAUvB,EAAEG,OAAOpD,OAASoD,EAK1C0B,EAAe7B,EAAEE,OAAOnD,OAAS,EACjC+E,EAAKxE,KAAKoE,IAAIH,EAAQ5D,GAAQkE,EAAe3B,EAC7C6B,EAAKzE,KAAKoE,IAAIH,EAAQ5D,GAAQkE,EAAe3B,EAC7C8B,EAAK1E,KAAKsE,IAAIL,EAAQ5D,GAAQkE,EAAe3B,EAC7C+B,EAAK3E,KAAKsE,IAAIL,EAAQ5D,GAAQkE,EAAe3B,EAEnD,SAAAtD,OAAUkF,EAAV,KAAAlF,OAAgBoF,EAAhB,KAAApF,OAAsBmF,EAAtB,KAAAnF,OAA4BqF,EAA5B,KAAArF,OAAkC6E,EAAlC,KAAA7E,OAAwC+E,OAK5ClG,EAAA,qBAAK4D,MAAOA,EAAOC,OAAQA,GACvB7D,EAAA,mBAAGyG,IAAK,SAAA3F,GAAC,OAAK4C,EAAKL,cAAgBvC,KACnCd,EAAA,mBAAGyG,IAAK,SAAA3F,GAAC,OAAK4C,EAAKN,YAActC,UArKjDsB,EAAA,CAAmCsE,iBCD7BC,EAAUC,OAAOC,WAAa,GAEvBC,EAAb,SAAAzE,GAAA,SAAAyE,IAAA,IAAAxE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoE,GAAA,QAAAnE,EAAAC,UAAAZ,OAAAa,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAR,EAAAC,OAAAQ,EAAA,EAAAR,CAAAE,MAAAJ,EAAAE,OAAAS,EAAA,EAAAT,CAAAsE,IAAA5D,KAAAC,MAAAb,EAAA,CAAAI,MAAAvB,OAAA0B,MACYkE,SADZ,EAAAxE,EAAA,OAAAC,OAAAc,EAAA,EAAAd,CAAAsE,EAAAzE,GAAAG,OAAAe,EAAA,EAAAf,CAAAsE,EAAA,EAAAtD,IAAA,SAAAC,MAAA,WAGoB,IAAAC,EAAAhB,KAAAiB,EAC2CjB,KAAK3C,MAApD6D,EADID,EACJC,MAAOC,EADHF,EACGE,OAAQC,EADXH,EACWG,OAAQjD,EADnB8C,EACmB9C,OAAQmG,EAD3BrD,EAC2BqD,YAEjCC,EFxByB,SAACpG,GAEpC,IAAMqG,EAAU,GAqBhB,OApBArG,EAAOoD,QAAQ,SAAAkD,GACXA,EAAO/F,KAAK6C,QAAQ,SAAAlC,GAGhB,IAAMqF,EAAc5E,OAAO6E,KAAKH,GAASI,KACrC,SAAAC,GAAC,OAAIA,EAAEC,gBAAkBzF,EAAIyF,gBAG7BJ,IACArF,EAAMqF,GAGLF,EAAQnF,KACTmF,EAAQnF,GAAO,GAGnBmF,EAAQnF,SAITS,OAAO6E,KAAKH,GAASO,IAAI,SAAA1F,GAAG,MAAK,CACpCA,MACA2F,MAAOR,EAAQnF,MEDQ4F,CAAwB9G,GAEzC+G,EAAYtH,IACNoC,KAAKqE,KACZlC,UAAU,QACVC,KAAKmC,EAAgB,SAAC1C,GAAD,OAAqBA,EAAExC,MAE3CqD,EAAQwC,EACTxC,QACAC,OAAO,QACPH,MAAM,mBAAoB,UAC1BI,KAAK,IAAK,SAAAuC,GAAC,OAAI9G,iBAAO4F,EAAS/C,EAAQ+C,KACvCrB,KAAK,IAAK,SAAAuC,GAAC,OAAI9G,iBAAO4F,EAAS9C,EAAS8C,KAC7CvB,EAAMH,WAAWxE,GAAiByE,MAAM,YAAa,YAErD0C,EACK7C,OACAE,WAAW5E,GACX6E,MAAM,YAAa,YACnBC,SAEL,IAAMF,EAAa3E,IAAc,SAASE,SAAS,KAE7CsH,EAAQ1C,EAAMG,MAAMqC,GAAkBG,KAAK,SAAAxD,GAAC,OAAIA,EAAExC,MAExD+F,EAAME,UAAU,UAChBF,EACK7C,WAAWvE,GACX4E,KAAK,OAAQ,SAAAf,GAEV,IAAMd,EACFuD,GAAeA,EAAY5F,KAAKsE,IAAInB,EAAExC,KAChCiF,EAAY9F,MACZH,iBAAO,IAAK,KACtB,aAAAI,OAAcsC,EAAd,KAAAtC,OAAuBsC,EAAvB,KAAAtC,OAAgCsC,EAAhC,OAEH6B,KAAK,UAAW,SAAAf,GAAC,OACdyC,IAAgBA,EAAY5F,KAAKsE,IAAInB,EAAExC,KAAO,GAAM,IAG5D,IAAMsC,EAAa/D,IACE2G,GAChB3C,MACG,SACAhE,MAEK6D,EAAEL,EAAOK,GACTC,EAAEN,EAAOM,IAEjBE,MAAM,SAAUhE,OAChBgE,MAAM,UAAWhE,OAetB,OAZA+D,EAAW4D,KAAK,GAChB5D,EAAW6D,OAGXJ,EAAME,YAENF,EACK7C,WAAWA,GACXK,KAAK,IAAK,SAAAf,GAAC,OAAIA,EAAEJ,IACjBmB,KAAK,IAAK,SAAAf,GAAC,OAAIA,EAAEH,IACjBkB,KAAK,YAAa,SAAAf,GAAC,OAAc,EAAVA,EAAEmD,MAAY,EAAI,OAEvC1H,EAAA,qBAAKyG,IAAK,SAAA3F,GAAC,OAAK4C,EAAKqD,IAAMjG,GAAI8C,MAAOA,EAAOC,OAAQA,QAvEpEiD,EAAA,CAA+BJ,iBC8IhByB,cA7IX,SAAAA,EAAYpI,GAAW,IAAAwC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyF,GACnB5F,EAAAC,OAAAQ,EAAA,EAAAR,CAAAE,KAAAF,OAAAS,EAAA,EAAAT,CAAA2F,GAAAjF,KAAAR,KAAM3C,IAEN,IAAM6D,EAAQgD,OAAOC,WACfhD,EAAS+C,OAAOwB,YAChBtE,EAAS,CAAEK,EAAGP,EAAQ,EAAGQ,EAAGP,EAAS,GALxB,OAOnBtB,EAAK8F,MAAQ,CACTxH,OAAQ,GACRkD,QAAS,GACTH,QACAC,SACAC,UAGJvB,EAAKpC,MAAQoC,EAAKpC,MAAMmI,KAAX9F,OAAA+F,EAAA,EAAA/F,CAAAD,IACbA,EAAKnC,QAAUmC,EAAKnC,QAAQkI,KAAb9F,OAAA+F,EAAA,EAAA/F,CAAAD,IACfA,EAAKiG,SAAWjG,EAAKiG,SAASF,KAAd9F,OAAA+F,EAAA,EAAA/F,CAAAD,IAChBA,EAAKkG,cAAgBlG,EAAKkG,cAAcH,KAAnB9F,OAAA+F,EAAA,EAAA/F,CAAAD,IAlBFA,mFAsBnBG,KAAKvC,QAELyG,OAAO8B,iBAAiB,SAAUhG,KAAK8F,yDAIvC5B,OAAO+B,oBAAoB,SAAUjG,KAAK8F,2CAG9B,IAAAI,EAQRlG,KAAK2F,MANLzE,EAFQgF,EAERhF,MACAC,EAHQ+E,EAGR/E,OACAE,EAJQ6E,EAIR7E,QACAD,EALQ8E,EAKR9E,OACA+E,EANQD,EAMRC,eACAhI,EAPQ+H,EAOR/H,OAGJ,OACIiI,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAACE,EAAD,CACItF,MAAOA,EACPC,OAAQA,EACRC,OAAQA,EACRjD,OAAQA,EAAOsI,MAAQ,GACvBnC,YAAa6B,IAEjBC,EAAAC,EAAAC,cAACI,EAAD,CACIvI,OAAQA,EAAOsI,MAAQ,GACvBpF,QAASA,EACTH,MAAOA,EACPC,OAAQA,EACRC,OAAQA,EACRE,QAAStB,KAAK+F,gBAElBK,EAAAC,EAAAC,cAACK,EAAD,CAAWlJ,MAAOuC,KAAKvC,MAAOC,QAASsC,KAAKtC,8CAMpD,IAAMwD,EAAQgD,OAAOC,WACfhD,EAAS+C,OAAOwB,YAChBtE,EAAS,CAAEK,EAAGP,EAAQ,EAAGQ,EAAGP,EAAS,GAE3CnB,KAAK4G,SAAS,CACV1F,QACAC,SACAC,0LAMsByF,MAAMC,uBAAtBzF,SAEAlD,iBAAc6B,KAAK2F,MAAMxH,QAGzB4I,EAAMC,eAAK3F,EAAQ4F,OAAO,SAACzF,EAAG0F,GAAJ,OAAU1F,EAAE/C,OAAOyI,IAAI,KACjDC,EAASJ,EAAIK,OAAO,SAAAlJ,GAAE,OAAKC,EAAOD,cAGZ2I,MAAMnI,KAAKyI,UAAjCE,SAENF,EAAO5F,QAAQ,SAACrD,EAAIoJ,GAChB,IAAM7C,EAASxG,EAAUC,EAAIC,GAC7BsG,EAAO/F,KAAO,IAAIC,IACd0I,EAAcC,GAAGvC,IAAI3F,IAEzBqF,EAAO7F,OAA4B,GAAnB6F,EAAO/F,KAAK6I,KAAa,IAG7CpJ,EAAOsI,KAAO3G,OAAO6E,KAAKxG,GACrBiJ,OAAO,SAAAI,GAAC,MAAU,SAANA,IACZzC,IAAI,SAAA7G,GAAE,OAAIC,EAAOD,KAGtBmD,EAAQE,QAAQ,SAAAkG,GACZ,IAAMpB,EAAIlI,EAAOsJ,EAAO,IAClBlJ,EAAIJ,EAAOsJ,EAAO,IAExBpB,EAAExH,UAAU6I,IAAInJ,EAAEL,IAClBK,EAAEO,SAAS4I,IAAIrB,EAAEnI,MAGrB8B,KAAK4G,SAAS,CACVzI,SACAkD,QAASrB,KAAK2F,MAAMtE,QAAQ5C,OACxB4C,EAAQ0D,IAAI,SAAA0C,GACR,MAAO,CACH1F,OAAQ0F,EAAO,GACfzF,OAAQyF,EAAO,2DAM/BE,QAAQC,MAARC,EAAAC,sJAIc5J,GAAY,IACtBC,EAAW6B,KAAK2F,MAAhBxH,OAER6B,KAAK4G,SAAS,CACVT,eAAgBhI,EAAOD,uCAK3B8B,KAAK4G,SAAS,CACVzI,OAAQ,GACRkD,QAAS,YAzIH0G,aClBlBC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.87598844.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface Props {\n    onAdd: () => void;\n    onClear: () => void;\n}\n\nexport const Interface: React.SFC<Props> = (props: Props) => {\n    return (\n        <React.Fragment>\n            <h1 className=\"title\">The Social Network</h1>\n\n            <a className=\"button add\" onClick={props.onAdd}>\n                <div>+</div>\n            </a>\n            <a className=\"button clear\" onClick={props.onClear}>\n                <div>-</div>\n            </a>\n        </React.Fragment>\n    );\n};\n","import * as d3 from 'd3';\n\nconst enterExitDuration = 400;\nconst stateChangeDuration = 600;\n\nexport const exitTransition = d3\n    .transition('exit')\n    .ease(d3.easeBackIn)\n    .duration(enterExitDuration);\n\nexport const enterTransition = d3\n    .transition('enter')\n    .ease(d3.easeBackOut)\n    .duration(enterExitDuration);\n\nexport const stateChangeTransition = d3\n    .transition('change')\n    .ease(d3.easeCircleInOut)\n    .duration(stateChangeDuration);\n","import { TagFrequency } from '../interfaces/TagFrequency';\nimport { Person } from '../interfaces/Person';\nimport { People } from '../interfaces/People';\nimport { random } from 'lodash';\n\nexport const calculateTagFrequencies = (people: Person[]): TagFrequency[] => {\n    // Calculate how often each tag occurs\n    const tagDict = {};\n    people.forEach(person => {\n        person.tags.forEach(tag => {\n            // Find existing tags ignoring case\n            // since twitter handles and hashtags are case insensitive\n            const existingTag = Object.keys(tagDict).find(\n                t => t.toLowerCase() === tag.toLowerCase()\n            );\n\n            if (existingTag) {\n                tag = existingTag;\n            }\n\n            if (!tagDict[tag]) {\n                tagDict[tag] = 0;\n            }\n\n            tagDict[tag]++;\n        });\n    });\n\n    return Object.keys(tagDict).map(tag => ({\n        tag,\n        count: tagDict[tag]\n    }));\n};\n\nexport const addPerson = (id: number, people: People) => {\n    const r = random(0, 255);\n    const g = random(0, 255);\n    const b = random(0, 255);\n    const color = `rgb(${r},${g},${b})`;\n\n    people[id] = {\n        id,\n        tags: new Set<string>(),\n        radius: 0,\n        following: new Set<number>(),\n        followed: new Set<number>(),\n        color\n    };\n\n    return people[id];\n};\n\nexport const bound = (num: number, min: number, max: number) =>\n    Math.max(min, Math.min(max - min, num));\n\nexport const normalizeTag = (tag: string) => {\n    if (tag[tag.length - 1] === ':') {\n        tag = tag.substring(0, tag.length - 1);\n    }\n\n    return tag;\n};\n","import * as React from 'react';\nimport { Point } from '../interfaces/Point';\nimport * as d3 from 'd3';\nimport { Person } from '../interfaces/Person';\nimport { FollowRelationship } from '../interfaces/FollowRelationship';\nimport { enterTransition, exitTransition } from '../util/D3Utils';\nimport { bound } from '../util/DataUtils';\nimport { random } from 'lodash';\n\ninterface Props {\n    width: number;\n    height: number;\n    center: Point;\n    people: Person[];\n    follows: FollowRelationship[];\n    onHover: (id?: number) => void;\n}\n\nconst PI_2 = Math.PI / 2;\nconst LINK_FILL = '#808080';\nconst NODE_FILL = '#000000';\n\nexport class SocialNetwork extends React.PureComponent<Props> {\n    private circleGroup: SVGElement | null;\n    private triangleGroup: SVGElement | null;\n\n    public render() {\n        const { width, height, center, people, follows, onHover } = this.props;\n\n        // Initialize node position so they start roughly in the center\n        people.forEach(p => {\n            p.x = p.x || random(center.x - 50, center.x + 50);\n            p.y = p.y || random(center.y - 50, center.y + 50);\n        });\n\n        const simulation = d3\n            .forceSimulation(people)\n            .force(\n                'links',\n                d3\n                    .forceLink(follows)\n                    .id((d: Person) => d.id as any)\n                    .distance(\n                        (d: any) => d.source.radius + d.target.radius + 10\n                    )\n                    .strength(0)\n            )\n            .force('center', d3.forceCenter(center.x, center.y))\n            .force('charge', d3.forceManyBody().strength(-1))\n            .force(\n                'collide',\n                d3.forceCollide().radius((d: Person) => d.radius)\n            );\n\n        let circles = d3\n            .select(this.circleGroup)\n            .selectAll('circle')\n            .data(people, (d: Person) => d.id + '');\n\n        circles\n            .exit()\n            .on('mouseover', null)\n            .on('mouseout', null)\n            .transition(exitTransition)\n            .style('transform', 'scale(0)')\n            .remove();\n\n        const enter = circles.enter().append('circle');\n\n        enter\n            .style('transform', 'scale(0)')\n            .attr('fill', NODE_FILL)\n            .attr('stroke', d => d.color)\n            .attr('stroke-width', d => d.radius / 4)\n            .attr('data-id', d => `id-${d.id}`)\n            .transition(enterTransition)\n            .style('transform-origin', 'center')\n            .style('cursor', 'pointer')\n            .style('transform', 'scale(1)');\n\n        circles = enter\n            .merge(circles as any)\n            .on('mouseover', hovering => {\n                d3.selectAll('circle').each(function(d: Person) {\n                    d3.select(this).attr(\n                        'opacity',\n                        hovering.id === d.id || hovering.following.has(d.id)\n                            ? 1\n                            : 0.1\n                    );\n                });\n                d3.selectAll('polygon').each(function(d: FollowRelationship) {\n                    d3.select(this).attr(\n                        'opacity',\n                        hovering.id === d.source.id ? 1 : 0.05\n                    );\n                });\n                d3.selectAll(`[data-id=id-${hovering.id}]`).attr(\n                    'fill',\n                    hovering.color\n                );\n                onHover(hovering.id);\n            })\n            .on('mouseout', function(d) {\n                d3.selectAll(`circle[data-id=id-${d.id}]`).attr(\n                    'fill',\n                    NODE_FILL\n                );\n                d3.selectAll(`polygon[data-id=id-${d.id}]`).attr(\n                    'fill',\n                    LINK_FILL\n                );\n                d3.selectAll('circle').attr('opacity', 1);\n                d3.selectAll('polygon').attr('opacity', 1);\n                onHover();\n            })\n            .attr('r', d => d.radius)\n            .attr('cx', center.x)\n            .attr('cy', center.y)\n            .attr('fill', d => (d.hovering ? d.color : NODE_FILL));\n\n        let triangles = d3\n            .select(this.triangleGroup)\n            .selectAll('polygon')\n            .data(follows);\n\n        triangles\n            .exit()\n            .transition(exitTransition)\n            .style('transform-origin', 'center')\n            .style('transform', 'scale(0)')\n            .remove();\n\n        let triangleEnter = triangles\n            .enter()\n            .append('polygon')\n            .style('cursor', 'pointer')\n            .attr('data-id', (d: FollowRelationship) => `id-${d.source.id}`);\n\n        triangles = triangleEnter\n            .merge(triangles as any)\n            .attr('fill', (d: any) => (d.hovering ? d.color : LINK_FILL));\n\n        // Update the positions of the nodes and the lines based on their physics calculations\n        simulation.nodes(people).on('tick', () => {\n            // Keep nodes within the width and height bounds\n            // https://bl.ocks.org/mbostock/1129492\n            circles\n                .attr('cx', (d: any) => bound(d.x, d.radius, width))\n                .attr('cy', (d: any) => bound(d.y, d.radius, height));\n\n            triangles.attr('points', (d: any) => {\n                const source = {\n                    x: bound(d.source.x, d.source.radius, width),\n                    y: bound(d.source.y, d.source.radius, height)\n                };\n                const target = {\n                    x: bound(d.target.x, d.target.radius, width),\n                    y: bound(d.target.y, d.target.radius, height)\n                };\n\n                // Calculate the angle of the line between the nodes\n                const angle = Math.atan2(\n                    target.y - source.y,\n                    target.x - source.x\n                );\n\n                // Move the target center point to the edge closest to the source node\n                const x4 = Math.cos(angle) * -d.target.radius + target.x;\n                const y4 = Math.sin(angle) * -d.target.radius + target.y;\n\n                // Create 2 source points moved out from the source center\n                // by a third the radius at right angles from the angle between nodes\n                // to give directionality to follow relationship\n                const triangleSize = d.source.radius / 6;\n                const x1 = Math.cos(angle + PI_2) * triangleSize + source.x;\n                const x2 = Math.cos(angle - PI_2) * triangleSize + source.x;\n                const y1 = Math.sin(angle + PI_2) * triangleSize + source.y;\n                const y2 = Math.sin(angle - PI_2) * triangleSize + source.y;\n\n                return `${x1},${y1} ${x2},${y2} ${x4},${y4}`;\n            });\n        });\n\n        return (\n            <svg width={width} height={height}>\n                <g ref={r => (this.triangleGroup = r)} />\n                <g ref={r => (this.circleGroup = r)} />\n            </svg>\n        );\n    }\n}\n","import * as React from 'react';\nimport { Point } from '../interfaces/Point';\nimport { Person } from '../interfaces/Person';\nimport * as d3 from 'd3';\nimport { calculateTagFrequencies } from '../util/DataUtils';\nimport { random } from 'lodash';\nimport { TagFrequency } from '../interfaces/TagFrequency';\nimport {\n    enterTransition,\n    exitTransition,\n    stateChangeTransition\n} from '../util/D3Utils';\n\ninterface Props {\n    width: number;\n    height: number;\n    center: Point;\n    people: Person[];\n    hoverPerson?: Person;\n}\n\nconst PADDING = window.innerWidth / 20;\n\nexport class WordCloud extends React.PureComponent<Props> {\n    private svg: SVGElement | null;\n\n    public render() {\n        const { width, height, center, people, hoverPerson } = this.props;\n\n        const tagFrequencies = calculateTagFrequencies(people);\n\n        const selection = d3\n            .select(this.svg)\n            .selectAll('text')\n            .data(tagFrequencies, (d: TagFrequency) => d.tag);\n\n        const enter = selection\n            .enter()\n            .append('text')\n            .style('transform-origin', 'center')\n            .attr('x', _ => random(PADDING, width - PADDING))\n            .attr('y', _ => random(PADDING, height - PADDING));\n        enter.transition(enterTransition).style('transform', 'scale(1)');\n\n        selection\n            .exit()\n            .transition(exitTransition)\n            .style('transform', 'scale(0)')\n            .remove();\n\n        const transition = d3.transition('words').duration(1000);\n\n        const words = enter.merge(selection as any).text(d => d.tag);\n\n        words.interrupt('change');\n        words\n            .transition(stateChangeTransition)\n            .attr('fill', d => {\n                // Highlight tags of hovered person\n                const value =\n                    hoverPerson && hoverPerson.tags.has(d.tag)\n                        ? hoverPerson.color\n                        : random(150, 220);\n                return `rgb(${value},${value},${value})`;\n            })\n            .attr('opacity', d =>\n                hoverPerson && !hoverPerson.tags.has(d.tag) ? 0.1 : 1\n            );\n\n        const simulation = d3\n            .forceSimulation(tagFrequencies)\n            .force(\n                'center',\n                d3\n                    .forceCenter()\n                    .x(center.x)\n                    .y(center.y)\n            )\n            .force('charge', d3.forceManyBody())\n            .force('collide', d3.forceCollide());\n\n        // Only run the simulation for 10 ticks, rather than continuously\n        simulation.tick(3);\n        simulation.stop();\n\n        // Transition words to their force calculated positions\n        words.interrupt();\n\n        words\n            .transition(transition)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .attr('font-size', d => d.count * 3 + 6 + 'px');\n\n        return <svg ref={r => (this.svg = r)} width={width} height={height} />;\n    }\n}\n","import React, { Component } from 'react';\nimport { Store } from '../interfaces/Store';\nimport { uniq } from 'lodash';\nimport { Interface } from './Interface';\nimport { Point } from '../interfaces/Point';\nimport { SocialNetwork } from './SocialNetwork';\nimport { People } from '../interfaces/People';\nimport { FollowRelationship } from '../interfaces/FollowRelationship';\nimport { addPerson, normalizeTag } from '../util/DataUtils';\nimport { WordCloud } from './WordCloud';\nimport { Person } from '../interfaces/Person';\n\ndeclare var store: Store;\n\ninterface State {\n    people: People;\n    follows: FollowRelationship[];\n    width: number;\n    height: number;\n    center: Point;\n    hoveringPerson?: Person;\n}\n\nclass App extends Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const center = { x: width / 2, y: height / 2 };\n\n        this.state = {\n            people: {},\n            follows: [],\n            width,\n            height,\n            center\n        };\n\n        this.onAdd = this.onAdd.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.onHoverPerson = this.onHoverPerson.bind(this);\n    }\n\n    public componentDidMount() {\n        this.onAdd();\n\n        window.addEventListener('resize', this.onResize);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize);\n    }\n\n    public render() {\n        const {\n            width,\n            height,\n            follows,\n            center,\n            hoveringPerson,\n            people\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                <WordCloud\n                    width={width}\n                    height={height}\n                    center={center}\n                    people={people.list || []}\n                    hoverPerson={hoveringPerson}\n                />\n                <SocialNetwork\n                    people={people.list || []}\n                    follows={follows}\n                    width={width}\n                    height={height}\n                    center={center}\n                    onHover={this.onHoverPerson}\n                />\n                <Interface onAdd={this.onAdd} onClear={this.onClear} />\n            </React.Fragment>\n        );\n    }\n\n    private onResize() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const center = { x: width / 2, y: height / 2 };\n\n        this.setState({\n            width,\n            height,\n            center\n        });\n    }\n\n    private async onAdd() {\n        try {\n            const follows = await store.sample();\n\n            const people = { ...this.state.people };\n\n            // Figure out the new people\n            const ids = uniq(follows.reduce((p, c) => p.concat(c), []));\n            const newIds = ids.filter(id => !people[id]);\n\n            // Fetch the tags for the new people in one go\n            const newPeopleTags = await store.tags(newIds);\n            // Create the new people and assign their tags\n            newIds.forEach((id, i) => {\n                const person = addPerson(id, people);\n                person.tags = new Set<string>(\n                    newPeopleTags[i].map(normalizeTag)\n                );\n                person.radius = person.tags.size * 0.3 + 4;\n            });\n\n            people.list = Object.keys(people)\n                .filter(k => k !== 'list')\n                .map(id => people[id]);\n\n            // Add the following relationship to the people\n            follows.forEach(follow => {\n                const a = people[follow[0]];\n                const b = people[follow[1]];\n\n                a.following.add(b.id);\n                b.followed.add(a.id);\n            });\n\n            this.setState({\n                people,\n                follows: this.state.follows.concat(\n                    follows.map(follow => {\n                        return {\n                            source: follow[0] as any,\n                            target: follow[1] as any\n                        };\n                    })\n                )\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    private onHoverPerson(id: number) {\n        const { people } = this.state;\n\n        this.setState({\n            hoveringPerson: people[id]\n        });\n    }\n\n    private onClear() {\n        this.setState({\n            people: {},\n            follows: []\n        });\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}