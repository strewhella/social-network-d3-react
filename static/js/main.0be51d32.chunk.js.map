{"version":3,"sources":["components/Interface.tsx","util/D3Utils.ts","util/DataUtils.ts","components/SocialNetwork.tsx","components/WordCloud.tsx","components/App.tsx","index.tsx"],"names":["Interface","_React$PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","adding","onAdd","bind","assertThisInitialized","inherits","createClass","key","value","_this$props","onClear","react","className","onClick","_this2","setTimeout","React","exitTransition","d3","ease","duration","enterTransition","stateChangeTransition","calculateTagFrequencies","people","tagDict","forEach","person","tags","tag","existingTag","keys","find","t","toLowerCase","map","random","count","color","concat","mergeTagFrequencies","first","second","dict","cloneDeep","addPerson","id","r","g","b","Set","radius","following","followed","bound","num","min","max","Math","normalizeTag","length","substring","PI_2","PI","SocialNetwork","circleGroup","triangleGroup","simulation","follows","center","force","d","distance","source","target","strength","x","y","width","height","onHover","p","nodes","links","alpha","restart","circles","selectAll","data","exit","on","transition","style","remove","enter","append","attr","merge","hovering","each","has","triangles","triangleEnter","angle","atan2","x4","cos","y4","sin","triangleSize","x1","x2","y1","y2","ref","PADDING","window","innerWidth","WordCloud","svg","state","tagFrequencies","nextProps","hoverPerson","setState","finishingHover","selection","_","interrupt","words","text","tick","stop","App","innerHeight","onResize","onHoverPerson","addEventListener","removeEventListener","_this$state","hoveringPerson","react_default","a","createElement","Fragment","WordCloud_WordCloud","SocialNetwork_SocialNetwork","list","Interface_Interface","store","sample","ids","uniq","reduce","c","newIds","filter","newPeopleTags","newPeople","i","size","k","follow","add","newTagFrequencies","console","error","_context","t0","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.0be51d32.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface Props {\n    onAdd: () => void;\n    onClear: () => void;\n}\n\nexport class Interface extends React.PureComponent<Props> {\n    private adding: boolean;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.onAdd = this.onAdd.bind(this);\n    }\n\n    public render() {\n        const { onAdd, onClear } = this.props;\n\n        return (\n            <React.Fragment>\n                <h1 className=\"title\">The Social Network</h1>\n\n                <a className=\"button add\" onClick={this.onAdd}>\n                    <div>+</div>\n                </a>\n                <a className=\"button clear\" onClick={onClear}>\n                    <div>-</div>\n                </a>\n            </React.Fragment>\n        );\n    }\n\n    private onAdd() {\n        if (!this.adding) {\n            this.adding = true;\n            this.props.onAdd();\n            setTimeout(() => {\n                this.adding = false;\n            }, 1000);\n        }\n    }\n}\n","import * as d3 from 'd3';\n\nconst enterExitDuration = 400;\nconst stateChangeDuration = 600;\n\nexport const exitTransition = d3\n    .transition('exit')\n    .ease(d3.easeBackIn)\n    .duration(enterExitDuration);\n\nexport const enterTransition = d3\n    .transition('enter')\n    .ease(d3.easeBackOut)\n    .duration(enterExitDuration);\n\nexport const stateChangeTransition = d3\n    .transition('change')\n    .ease(d3.easeCircleInOut)\n    .duration(stateChangeDuration);\n","import { TagFrequency } from '../interfaces/TagFrequency';\nimport { Person } from '../interfaces/Person';\nimport { People } from '../interfaces/People';\nimport { random, cloneDeep } from 'lodash';\n\nexport const calculateTagFrequencies = (people: Person[]): TagFrequency[] => {\n    // Calculate how often each tag occurs\n    const tagDict = {};\n    people.forEach(person => {\n        person.tags.forEach(tag => {\n            // Find existing tags ignoring case\n            // since twitter handles and hashtags are case insensitive\n            const existingTag = Object.keys(tagDict).find(\n                t => t.toLowerCase() === tag.toLowerCase()\n            );\n\n            if (existingTag) {\n                tag = existingTag;\n            }\n\n            if (!tagDict[tag]) {\n                tagDict[tag] = 0;\n            }\n\n            tagDict[tag]++;\n        });\n    });\n\n    return Object.keys(tagDict).map(tag => {\n        const value = random(150, 220);\n        return {\n            tag,\n            count: tagDict[tag],\n            color: `rgb(${value},${value},${value})`\n        };\n    });\n};\n\nexport const mergeTagFrequencies = (\n    first: TagFrequency[],\n    second: TagFrequency[]\n): TagFrequency[] => {\n    const dict = {};\n    cloneDeep(first)\n        .concat(cloneDeep(second))\n        .forEach(t => {\n            if (!dict[t.tag]) {\n                dict[t.tag] = t;\n            } else {\n                dict[t.tag].count += t.count;\n            }\n        });\n\n    return Object.keys(dict).map(tag => dict[tag]);\n};\n\nexport const addPerson = (id: number, people: People) => {\n    const r = random(0, 255);\n    const g = random(0, 255);\n    const b = random(0, 255);\n    const color = `rgb(${r},${g},${b})`;\n\n    people[id] = {\n        id,\n        tags: new Set<string>(),\n        radius: 0,\n        following: new Set<number>(),\n        followed: new Set<number>(),\n        color\n    };\n\n    return people[id];\n};\n\nexport const bound = (num: number, min: number, max: number) =>\n    Math.max(min, Math.min(max - min, num));\n\nexport const normalizeTag = (tag: string) => {\n    if (tag[tag.length - 1] === ':') {\n        tag = tag.substring(0, tag.length - 1);\n    }\n\n    return tag;\n};\n","import * as React from 'react';\nimport { Point } from '../interfaces/Point';\nimport * as d3 from 'd3';\nimport { Person } from '../interfaces/Person';\nimport { FollowRelationship } from '../interfaces/FollowRelationship';\nimport { enterTransition, exitTransition } from '../util/D3Utils';\nimport { bound } from '../util/DataUtils';\nimport { random } from 'lodash';\nimport { Simulation } from 'd3';\n\ninterface Props {\n    width: number;\n    height: number;\n    center: Point;\n    people: Person[];\n    follows: FollowRelationship[];\n    onHover: (id?: number) => void;\n}\n\nconst PI_2 = Math.PI / 2;\nconst LINK_FILL = '#808080';\nconst NODE_FILL = '#000000';\n\nexport class SocialNetwork extends React.PureComponent<Props> {\n    private circleGroup: SVGElement | null;\n    private triangleGroup: SVGElement | null;\n\n    private simulation: Simulation<Person, FollowRelationship>;\n\n    constructor(props: Props) {\n        super(props);\n\n        const { people, follows, center } = props;\n\n        this.simulation = d3\n            .forceSimulation(people)\n            .force(\n                'links',\n                d3\n                    .forceLink(follows)\n                    .id((d: Person) => d.id as any)\n                    .distance(\n                        (d: any) => d.source.radius + d.target.radius + 10\n                    )\n                    .strength(0)\n            )\n            .force('center', d3.forceCenter(center.x, center.y))\n            .force('charge', d3.forceManyBody().strength(-1))\n            .force(\n                'collide',\n                d3.forceCollide().radius((d: Person) => d.radius)\n            );\n    }\n\n    public render() {\n        const { width, height, center, people, follows, onHover } = this.props;\n\n        // Initialize node position so they start roughly in the center\n        people.forEach(p => {\n            p.x = p.x || random(center.x - 50, center.x + 50);\n            p.y = p.y || random(center.y - 50, center.y + 50);\n        });\n\n        this.simulation.nodes(people);\n        (this.simulation.force('links') as any).links(follows);\n        this.simulation.alpha(1).restart();\n\n        let circles = d3\n            .select(this.circleGroup)\n            .selectAll('circle')\n            .data(people, (d: Person) => d.id + '');\n\n        circles\n            .exit()\n            .on('mouseover', null)\n            .on('mouseout', null)\n            .transition(exitTransition)\n            .style('transform', 'scale(0)')\n            .remove();\n\n        const enter = circles.enter().append('circle');\n\n        enter\n            .style('transform', 'scale(0)')\n            .attr('fill', NODE_FILL)\n            .attr('stroke', d => d.color)\n            .attr('stroke-width', d => d.radius / 4)\n            .attr('data-id', d => `id-${d.id}`)\n            .transition(enterTransition)\n            .style('transform-origin', 'center')\n            .style('cursor', 'pointer')\n            .style('transform', 'scale(1)');\n\n        circles = enter\n            .merge(circles as any)\n            .on('mouseover', hovering => {\n                d3.selectAll('circle').each(function(d: Person) {\n                    d3.select(this).attr(\n                        'opacity',\n                        hovering.id === d.id || hovering.following.has(d.id)\n                            ? 1\n                            : 0.1\n                    );\n                });\n                d3.selectAll('polygon').each(function(d: FollowRelationship) {\n                    d3.select(this).attr(\n                        'opacity',\n                        hovering.id === d.source.id ? 1 : 0.05\n                    );\n                });\n                d3.selectAll(`[data-id=id-${hovering.id}]`).attr(\n                    'fill',\n                    hovering.color\n                );\n                onHover(hovering.id);\n            })\n            .on('mouseout', function(d) {\n                d3.selectAll(`circle[data-id=id-${d.id}]`).attr(\n                    'fill',\n                    NODE_FILL\n                );\n                d3.selectAll(`polygon[data-id=id-${d.id}]`).attr(\n                    'fill',\n                    LINK_FILL\n                );\n                d3.selectAll('circle').attr('opacity', 1);\n                d3.selectAll('polygon').attr('opacity', 1);\n                onHover();\n            })\n            .attr('r', d => d.radius)\n            .attr('cx', center.x)\n            .attr('cy', center.y)\n            .attr('fill', d => (d.hovering ? d.color : NODE_FILL));\n\n        let triangles = d3\n            .select(this.triangleGroup)\n            .selectAll('polygon')\n            .data(follows);\n\n        triangles\n            .exit()\n            .transition(exitTransition)\n            .style('transform-origin', 'center')\n            .style('transform', 'scale(0)')\n            .remove();\n\n        let triangleEnter = triangles\n            .enter()\n            .append('polygon')\n            .style('cursor', 'pointer')\n            .attr('data-id', (d: FollowRelationship) => `id-${d.source.id}`);\n\n        triangles = triangleEnter\n            .merge(triangles as any)\n            .attr('fill', (d: any) => (d.hovering ? d.color : LINK_FILL));\n\n        // Update the positions of the nodes and the lines based on their physics calculations\n        this.simulation.nodes(people).on('tick', () => {\n            // Keep nodes within the width and height bounds\n            // https://bl.ocks.org/mbostock/1129492\n            circles\n                .attr('cx', (d: any) => bound(d.x, d.radius, width))\n                .attr('cy', (d: any) => bound(d.y, d.radius, height));\n\n            triangles.attr('points', (d: any) => {\n                const source = {\n                    x: bound(d.source.x, d.source.radius, width),\n                    y: bound(d.source.y, d.source.radius, height)\n                };\n                const target = {\n                    x: bound(d.target.x, d.target.radius, width),\n                    y: bound(d.target.y, d.target.radius, height)\n                };\n\n                // Calculate the angle of the line between the nodes\n                const angle = Math.atan2(\n                    target.y - source.y,\n                    target.x - source.x\n                );\n\n                // Move the target center point to the edge closest to the source node\n                const x4 = Math.cos(angle) * -d.target.radius + target.x;\n                const y4 = Math.sin(angle) * -d.target.radius + target.y;\n\n                // Create 2 source points moved out from the source center\n                // by a third the radius at right angles from the angle between nodes\n                // to give directionality to follow relationship\n                const triangleSize = d.source.radius / 6;\n                const x1 = Math.cos(angle + PI_2) * triangleSize + source.x;\n                const x2 = Math.cos(angle - PI_2) * triangleSize + source.x;\n                const y1 = Math.sin(angle + PI_2) * triangleSize + source.y;\n                const y2 = Math.sin(angle - PI_2) * triangleSize + source.y;\n\n                return `${x1},${y1} ${x2},${y2} ${x4},${y4}`;\n            });\n        });\n\n        return (\n            <svg width={width} height={height}>\n                <g ref={r => (this.triangleGroup = r)} />\n                <g ref={r => (this.circleGroup = r)} />\n            </svg>\n        );\n    }\n}\n","import * as React from 'react';\nimport { Point } from '../interfaces/Point';\nimport { Person } from '../interfaces/Person';\nimport * as d3 from 'd3';\nimport { random } from 'lodash';\nimport { TagFrequency } from '../interfaces/TagFrequency';\nimport { Simulation } from 'd3';\nimport {\n    enterTransition,\n    exitTransition,\n    stateChangeTransition\n} from '../util/D3Utils';\n\ninterface Props {\n    width: number;\n    height: number;\n    center: Point;\n    hoverPerson?: Person;\n    tagFrequencies: TagFrequency[];\n}\n\ninterface State {\n    finishingHover?: boolean;\n}\n\nconst PADDING = window.innerWidth / 20;\n\nexport class WordCloud extends React.PureComponent<Props, State> {\n    private svg: SVGElement | null;\n    private simulation: Simulation<TagFrequency, any>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {};\n\n        this.simulation = d3\n            .forceSimulation(props.tagFrequencies)\n            .force(\n                'center',\n                d3\n                    .forceCenter()\n                    .x(props.center.x)\n                    .y(props.center.y)\n            )\n            .force('charge', d3.forceManyBody())\n            .force('collide', d3.forceCollide());\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        if (this.props.hoverPerson && !nextProps.hoverPerson) {\n            this.setState({\n                finishingHover: true\n            });\n        }\n\n        if (\n            this.state.finishingHover &&\n            !this.props.hoverPerson &&\n            !nextProps.hoverPerson\n        ) {\n            this.setState({\n                finishingHover: false\n            });\n        }\n    }\n\n    public render() {\n        const {\n            width,\n            height,\n            tagFrequencies,\n            hoverPerson,\n            center\n        } = this.props;\n        const { finishingHover } = this.state;\n\n        const selection = d3\n            .select(this.svg)\n            .selectAll('text')\n            .data(tagFrequencies, (d: TagFrequency) => d.tag);\n\n        const enter = selection\n            .enter()\n            .append('text')\n            .style('transform-origin', 'center')\n            .attr('x', _ => random(PADDING, width - PADDING))\n            .attr('y', _ => random(PADDING, height - PADDING));\n        enter.transition(enterTransition).style('transform', 'scale(1)');\n\n        const exit = selection.exit();\n        exit.interrupt('exit');\n        exit.transition(exitTransition)\n            .style('transform', 'scale(0)')\n            .remove();\n\n        const transition = d3.transition('words').duration(1000);\n\n        const words = enter.merge(selection as any).text(d => d.tag);\n\n        words.interrupt('change');\n        words\n            .transition(stateChangeTransition)\n            .attr('fill', d => {\n                // Highlight tags of hovered person\n                return hoverPerson && hoverPerson.tags.has(d.tag)\n                    ? hoverPerson.color\n                    : d.color;\n            })\n            .attr('opacity', d =>\n                hoverPerson && !hoverPerson.tags.has(d.tag) ? 0.1 : 1\n            );\n\n        if (!hoverPerson && !finishingHover) {\n            // Reset the positions of all tags to the center so they recalculate correctly\n            tagFrequencies.forEach(p => {\n                p.x = random(center.x - 50, center.x + 50);\n                p.y = random(center.y - 50, center.y + 50);\n            });\n\n            this.simulation.nodes(tagFrequencies);\n            // Only run the simulation for a few ticks, rather than continuously\n            this.simulation.tick(3);\n            this.simulation.stop();\n        }\n\n        // Transition words to their force calculated positions\n        words\n            .transition(transition)\n            .attr('x', d => d.x)\n            .attr('y', d => d.y)\n            .attr('font-size', d => d.count * 3 + 6 + 'px');\n\n        return <svg ref={r => (this.svg = r)} width={width} height={height} />;\n    }\n}\n","import React, { Component } from 'react';\nimport { Store } from '../interfaces/Store';\nimport { uniq, cloneDeep } from 'lodash';\nimport { Interface } from './Interface';\nimport { Point } from '../interfaces/Point';\nimport { SocialNetwork } from './SocialNetwork';\nimport { People } from '../interfaces/People';\nimport { FollowRelationship } from '../interfaces/FollowRelationship';\nimport {\n    addPerson,\n    normalizeTag,\n    calculateTagFrequencies,\n    mergeTagFrequencies\n} from '../util/DataUtils';\nimport { WordCloud } from './WordCloud';\nimport { Person } from '../interfaces/Person';\nimport { TagFrequency } from '../interfaces/TagFrequency';\n\ndeclare var store: Store;\n\ninterface State {\n    people: People;\n    follows: FollowRelationship[];\n    width: number;\n    height: number;\n    center: Point;\n    hoveringPerson?: Person;\n    tagFrequencies: TagFrequency[];\n}\n\nclass App extends Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const center = { x: width / 2, y: height / 2 };\n\n        this.state = {\n            people: {},\n            follows: [],\n            width,\n            height,\n            center,\n            tagFrequencies: []\n        };\n\n        this.onAdd = this.onAdd.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.onHoverPerson = this.onHoverPerson.bind(this);\n    }\n\n    public componentDidMount() {\n        this.onAdd();\n\n        window.addEventListener('resize', this.onResize);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize);\n    }\n\n    public render() {\n        const {\n            width,\n            height,\n            follows,\n            center,\n            hoveringPerson,\n            people,\n            tagFrequencies\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                <WordCloud\n                    width={width}\n                    height={height}\n                    center={center}\n                    hoverPerson={hoveringPerson}\n                    tagFrequencies={tagFrequencies}\n                />\n                <SocialNetwork\n                    people={people.list || []}\n                    follows={follows}\n                    width={width}\n                    height={height}\n                    center={center}\n                    onHover={this.onHoverPerson}\n                />\n                <Interface onAdd={this.onAdd} onClear={this.onClear} />\n            </React.Fragment>\n        );\n    }\n\n    private onResize() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const center = { x: width / 2, y: height / 2 };\n\n        this.setState({\n            width,\n            height,\n            center\n        });\n    }\n\n    private async onAdd() {\n        try {\n            const follows = await store.sample();\n\n            const people = { ...this.state.people };\n\n            // Figure out the new people\n            const ids = uniq(follows.reduce((p, c) => p.concat(c), []));\n            const newIds = ids.filter(id => !people[id]);\n\n            // Fetch the tags for the new people in one go\n            const newPeopleTags = await store.tags(newIds);\n            // Create the new people and assign their tags\n            const newPeople = newIds.map((id, i) => {\n                const person = addPerson(id, people);\n                person.tags = new Set<string>(\n                    newPeopleTags[i].map(normalizeTag)\n                );\n                person.radius = person.tags.size * 0.3 + 4;\n                return person;\n            });\n\n            people.list = Object.keys(people)\n                .filter(k => k !== 'list')\n                .map(id => people[id]);\n\n            // Add the following relationship to the people\n            follows.forEach(follow => {\n                const a = people[follow[0]];\n                const b = people[follow[1]];\n\n                a.following.add(b.id);\n                b.followed.add(a.id);\n            });\n\n            const newTagFrequencies = calculateTagFrequencies(newPeople);\n            const tagFrequencies = mergeTagFrequencies(\n                this.state.tagFrequencies,\n                newTagFrequencies\n            );\n\n            this.setState({\n                people,\n                tagFrequencies,\n                follows: this.state.follows.concat(\n                    follows.map(follow => {\n                        return {\n                            source: follow[0] as any,\n                            target: follow[1] as any\n                        };\n                    })\n                )\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    private onHoverPerson(id: number) {\n        const { people } = this.state;\n\n        this.setState({\n            hoveringPerson: people[id]\n        });\n    }\n\n    private onClear() {\n        this.setState({\n            people: {},\n            follows: [],\n            tagFrequencies: []\n        });\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}